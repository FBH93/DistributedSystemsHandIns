// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coordination

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinationClient is the client API for Coordination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinationClient interface {
	Something(ctx context.Context, in *X, opts ...grpc.CallOption) (*Y, error)
}

type coordinationClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinationClient(cc grpc.ClientConnInterface) CoordinationClient {
	return &coordinationClient{cc}
}

func (c *coordinationClient) Something(ctx context.Context, in *X, opts ...grpc.CallOption) (*Y, error) {
	out := new(Y)
	err := c.cc.Invoke(ctx, "/coordination.Coordination/Something", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinationServer is the server API for Coordination service.
// All implementations must embed UnimplementedCoordinationServer
// for forward compatibility
type CoordinationServer interface {
	Something(context.Context, *X) (*Y, error)
	mustEmbedUnimplementedCoordinationServer()
}

// UnimplementedCoordinationServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinationServer struct {
}

func (UnimplementedCoordinationServer) Something(context.Context, *X) (*Y, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Something not implemented")
}
func (UnimplementedCoordinationServer) mustEmbedUnimplementedCoordinationServer() {}

// UnsafeCoordinationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinationServer will
// result in compilation errors.
type UnsafeCoordinationServer interface {
	mustEmbedUnimplementedCoordinationServer()
}

func RegisterCoordinationServer(s grpc.ServiceRegistrar, srv CoordinationServer) {
	s.RegisterService(&Coordination_ServiceDesc, srv)
}

func _Coordination_Something_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(X)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinationServer).Something(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordination.Coordination/Something",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinationServer).Something(ctx, req.(*X))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordination_ServiceDesc is the grpc.ServiceDesc for Coordination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordination.Coordination",
	HandlerType: (*CoordinationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Something",
			Handler:    _Coordination_Something_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordination/Coordination.proto",
}
